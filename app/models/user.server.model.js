// Load the module dependencies
const mongoose = require('mongoose');
const crypto = require('crypto');
const Schema = mongoose.Schema;

// Define a new 'UserSchema'
const UserSchema = new Schema({
	category: {
		type: String,
		required: 'User category is required'
	},
	firstName: String,
	lastName: String,
	email: {
		type: String,
		// Validate the email format
		match: [/.+\@.+\..+/, "Please fill a valid email address"]
	},	
	username: {
		type: String,
		// Set a unique 'username' index
		unique: true,
		// Validate 'username' value existance
		required: 'Username is required',
		// Trim the 'username' field
		trim: true
	},	
	password: {
		type: String,
		// Validate the 'password' value length
		validate: [
			(password) => password && password.length > 6,			
			'Password should be longer'
		]
	},	
	notification:{
		type: String
	},
	salt: { //to hash the password
		type: String
	},
	provider: { // strategy used to register the user
		type: String,
		required: 'Provider is required'
	},	
	providerId: String, // user identifier for the authentication strategy
	providerData: {},  // to store the user object retrieved from OAuth providers	
	created: {
		type: Date,
		// Create a default 'created' value
		default: Date.now
	}
});

// Set the 'fullname' virtual property
UserSchema.virtual('fullName').get(function() {
	return this.firstName + ' ' + this.lastName;
}).set(function(fullName) {
	const splitName = fullName.split(' ');
	this.firstName = splitName[0] || '';
	this.lastName = splitName[1] || '';
});

// pre-save middleware to handle the hashing of your usersâ€˜ passwords
UserSchema.pre('save', function (next) {
	if (this.password) {
		// creates an autogenerated pseudo-random hashing salt
		this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
		this.password = this.hashPassword(this.password); //returns hashed password
	}
	next();
});

// replaces the current user password with a hashed password (more secure)
// UserSchema.methods.hashPassword = function (password) {
// 	return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
// };

// Create an instance method for hashing a password
UserSchema.methods.hashPassword = function (password) {
    //console.log(crypto.pbkdf2Sync(password, this.salt, 1000, 64, 'sha1').toString('hex'))
    return crypto.pbkdf2Sync(password, this.salt, 1000, 64, 'sha1').toString('hex');

};
//authenticates the password (hashes it and compares with hashed version in db)
UserSchema.methods.authenticate = function (password) {
	return this.password === this.hashPassword(password);
};

UserSchema.statics.findUniqueUsername = function (username, suffix, callback) { // find an available unique username for new users
	var _this = this;
	var possibleUsername = username + (suffix || '');
	_this.findOne({
		username: possibleUsername
	}, function (err, user) {
		if (!err) {
			if (!user) {
				callback(possibleUsername);
			} else {
				return _this.findUniqueUsername(username, (suffix || 0) + 1, callback);
			}
		} else {
			callback(null);
		}
	});
};

	

// Configure the 'UserSchema' to use getters and virtuals when transforming to JSON
UserSchema.set('toJSON', {
	getters: true,
	virtuals: true
});

// Create the 'User' model out of the 'UserSchema'
mongoose.model('User', UserSchema);